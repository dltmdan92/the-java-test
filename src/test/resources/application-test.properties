# 테스트 환경에서 H2, 운영환경에서 실제 DB를 쓰게 될 경우  치명적인 단점이 존재한다.
# DB마다 Propagation, Isolation 전략이 다르다. Spring의 기본 전략은 DB의 default 전략을 따르는 것.
# 그 외 추가적으로 DB 마다 다를 수 있다.
# 테스트/운영 시 같은 DB를 보게 하는 것이 맞을 수 있다.

# 본 프로젝트에서는 테스트 실행 시, prod와 같이 postgres DB를 쓰되
# create-drop을 해서 DB를 갈아엎도록 시킨다.

#spring.datasource.url=jdbc:h2:memory:/studydb
#spring.datasource.username=sa
#spring.datasource.password=password
#spring.datasource.driver-class-name=org.h2.Driver


#spring.datasource.url=jdbc:postgresql://localhost:15432/springdata_test
# 테스트 컨테이너를 사용할 경우, tc를 붙여주고, host와 post는 적을 필요가 없다. (testcontainer가 알아서 함)
spring.datasource.url=jdbc:tc:postgresql:///springdata_test

# tc 이름을 가진 Driver를 testcontainers로 사용하도록 해준다.
spring.datasource.driver-class-name=org.testcontainers.jdbc.ContainerDatabaseDriver

# 테스트 컨테이너의 PostgreSQLContainer (DB 특화된 testcontainer)를 사용할 경우, username과 password는 필요 없다.
#spring.datasource.username=seungmoo
#spring.datasource.password=1568919am!

#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=create-drop